#!/bin/bash
scriptname=$(basename ${0%.*:-0})
echo ""

usage() {
  cat <<EOL
Usage: $scriptname [opts] arg1 [arg2]

This scripts does bla bla

Options:
  -f <file>, --file <file>  file to process
  -h, --help                shows this help
  -o, --overwrite           force overwrite
  
EOL
}

error_arg_missing() {
  echo "ERROR: required argument $1 missing"
  echo ""
  usage
  exit 1
}

error_optarg_missing() {
  echo "ERROR: option $1 requires and argument"
  echo ""
  usage
  exit 1
}

error_unknown_option() {
  echo "ERROR: unknown option $1"
  echo ""
  usage
  exit 1
}

error_duplicated_option() {
  echo "ERROR: duplicated option $1"
  echo ""
  usage
  exit 1
}

error_madatory_option_missing() {
  echo "ERROR: mandatory option $1 missing"
  echo ""
  usage
  exit 1
}

used_options=()
check_used_option() {
  local option=${1:1} # remove initial dash since it makes the search fail
  local regex="\<$option\>"
  if [[ ${used_options[@]} =~ $regex ]]; then
    error_duplicated_option "-$option"
  else
    used_options+=("$option")
  fi
}

file=''
overwrite=false
args=()

while [ "$#" -gt 0 ]; do
  case "$1" in
  -f | --file)
    check_used_option "-f"
    [[ -z $2 || $2 = -* ]] && error_optarg_missing $1
    file="$2"
    shift 2
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  -o | --overwrite)
    check_used_option "-o"
    overwrite=true
    shift 1
    ;;
  *)
    [[ $1 = -* ]] && error_unknown_option $1
    args+=("$1")
    shift 1
    ;;
  esac
done

# Check that mandatory argument arg1 is defined
[[ -z ${args[0]} ]] && error_arg_missing "arg1"

echo "Options:"
echo " - file: $file"
echo " - overwrite: $overwrite"
echo "Arguments:  ${args[@]}"
